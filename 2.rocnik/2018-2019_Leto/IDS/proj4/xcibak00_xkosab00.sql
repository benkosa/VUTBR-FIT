-- odstranenie tabuliek z pripadneho predosleho tvorenia databazy:
drop table festival  CASCADE CONSTRAINTS;
drop table stage     CASCADE CONSTRAINTS;
drop table koncert   CASCADE CONSTRAINTS;
drop table interpret CASCADE CONSTRAINTS;
drop table clen;
drop table cennik    CASCADE CONSTRAINTS;
drop table vstupenka;
drop table zakaznik  CASCADE CONSTRAINTS;
drop table uzivatel  CASCADE CONSTRAINTS;
drop table album     CASCADE CONSTRAINTS;
drop table piesen;
drop table singel;
drop table uzivatel_zakaznik;
drop table uzivatel_interpret;
drop table stage_interpret_pozicia;
drop table koncert_interpret_pozicia;



-- vytvorenie tabuliek:
create table festival(
    id_festival integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    miesto_konania varchar2(50) NOT NULL,
    obdobie_konania_od date NOT NULL,
    obdobie_konania_do date NOT NULL,
    rocnik integer NULL -- 1. a viac / bez rocniku - NULL (festivalov nebyva vela - NULL teda neplytva miestom)
);

create table stage(
    id_stage integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    plocha integer NOT NULL,
    kapacita_miest_statie integer NOT NULL,
    kapacita_miest_sedenie integer NOT NULL,
    kapacita_miest_VIP integer NOT NULL,
    kapacita_interpretov integer NOT NULL,
    
    id_festival integer,
    id_cennik integer
);

create table koncert (
    id_koncert integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    mesto varchar2(50) NOT NULL,
    datum_a_cas_konania date NOT NULL,
    kapacita_miest_statie integer NOT NULL,
    kapacita_miest_sedenie integer NOT NULL,
    kapacita_miest_VIP integer NOT NULL,
    
    id_cennik integer
);

create table interpret (
    id_interpret integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    zaner varchar2(50) NOT NULL,
    datum_vzniku date NOT NULL
);

create table clen (
    id_clen integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    meno varchar2(50) NOT NULL,
    priezvisko varchar2(50) NOT NULL,
    
    id_interpret integer
);

create table cennik (
    id_cennik integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    cena_statie integer NOT NULL,
    cena_sedenie integer NOT NULL,
    cena_vip integer NOT NULL
);

create table vstupenka (
    id_vstupenka integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    datum_a_cas_zakupenia date NOT NULL,
    typ varchar2(7) check (typ in ('statie', 'sedenie', 'VIP')),
    
    id_cennik integer,
    id_zakaznik integer
);

create table zakaznik ( -- uvazuje zakaznikov z danej (jednej) krajiny
    id_zakaznik integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    meno varchar2(50) NOT NULL,
    priezvisko varchar2(50) NOT NULL,
    mesto varchar2(50) NOT NULL,
    ulica varchar2(50) NOT NULL,
    cislo_domu varchar2(15) NOT NULL, -- napr. 1234/81, preto retazec a nie cislo
    telefonne_cislo varchar2(13) NOT NULL,
    email varchar2(50) NOT NULL
);

create table uzivatel (
    -- id_uzivatel integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    prezyvka varchar2(50), -- namiesto id - prezyvka = login
    opravnenie varchar2(7) check (opravnenie in ('zaklad', 'admin', 'spravca'))
);

create table album (
    id_album integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    datum_vydania date NOT NULL,
    
    id_interpret integer
);

create table piesen (
    id_piesen integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    dlzka_trvania timestamp NOT NULL,
    
    id_album integer
);

create table singel (
    id_singel integer GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    nazov varchar2(50) NOT NULL,
    dlzka_trvania timestamp NOT NULL,
    
    id_interpret integer
);

create table uzivatel_zakaznik ( -- uzivatel je zakaznikom
    prezyvka varchar2(50),
    id_zakaznik integer
);

create table uzivatel_interpret ( -- uzivatel ma v oblubenych interpreta
    prezyvka varchar2(50),
    id_interpret integer
);

create table stage_interpret_pozicia ( -- na stage-i vystupuje interpret v pozicii
    id_stage integer,
    id_interpret integer,
    pozicia varchar2(9) check (pozicia in ('headliner', 'obycajny'))
);

create table koncert_interpret_pozicia ( -- na koncerte vystupuje interpret v pozicii
    id_koncert integer,
    id_interpret integer,
    pozicia varchar2(13) check (pozicia in ('hlavna_kapela', 'predkapela'))
);



-- urcenie primarnych klucov pre vsetky tabulky:
ALTER TABLE festival  ADD CONSTRAINT pk_festival  PRIMARY KEY (id_festival);
ALTER TABLE stage     ADD CONSTRAINT pk_stage     PRIMARY KEY (id_stage);
ALTER TABLE koncert   ADD CONSTRAINT pk_koncert   PRIMARY KEY (id_koncert);
ALTER TABLE interpret ADD CONSTRAINT pk_interpret PRIMARY KEY (id_interpret);
ALTER TABLE clen      ADD CONSTRAINT pk_clen      PRIMARY KEY (id_clen);
ALTER TABLE cennik    ADD CONSTRAINT pk_cennik    PRIMARY KEY (id_cennik);
ALTER TABLE vstupenka ADD CONSTRAINT pk_vstupenka PRIMARY KEY (id_vstupenka);
ALTER TABLE zakaznik  ADD CONSTRAINT pk_zakaznik  PRIMARY KEY (id_zakaznik);
ALTER TABLE uzivatel  ADD CONSTRAINT pk_uzivatel  PRIMARY KEY (prezyvka);
ALTER TABLE album     ADD CONSTRAINT pk_album     PRIMARY KEY (id_album);
ALTER TABLE piesen    ADD CONSTRAINT pk_piesen    PRIMARY KEY (id_piesen);
ALTER TABLE singel    ADD CONSTRAINT pk_singel    PRIMARY KEY (id_singel);
ALTER TABLE uzivatel_zakaznik         ADD CONSTRAINT pk_uzi_zak PRIMARY KEY (prezyvka, id_zakaznik);
ALTER TABLE uzivatel_interpret        ADD CONSTRAINT pk_uzi_int PRIMARY KEY (prezyvka, id_interpret);
ALTER TABLE stage_interpret_pozicia   ADD CONSTRAINT pk_sta_int PRIMARY KEY (id_stage, id_interpret);
ALTER TABLE koncert_interpret_pozicia ADD CONSTRAINT pk_kon_int PRIMARY KEY (id_koncert, id_interpret);



-- urcenie cuzdzich klucov pre vsetky tabulky:
ALTER TABLE stage     ADD CONSTRAINT fk_stage_festival     FOREIGN KEY (id_festival)  REFERENCES festival   ON DELETE CASCADE;
ALTER TABLE stage     ADD CONSTRAINT fk_stage_cennik       FOREIGN KEY (id_cennik)    REFERENCES cennik     ON DELETE CASCADE;

ALTER TABLE koncert   ADD CONSTRAINT fk_koncert_cennik     FOREIGN KEY (id_cennik)    REFERENCES cennik     ON DELETE CASCADE;

ALTER TABLE clen      ADD CONSTRAINT fk_clen_interpret     FOREIGN KEY (id_interpret) REFERENCES interpret  ON DELETE CASCADE;

ALTER TABLE vstupenka ADD CONSTRAINT fk_vstupenka_cennik   FOREIGN KEY (id_cennik)    REFERENCES cennik     ON DELETE CASCADE;
ALTER TABLE vstupenka ADD CONSTRAINT fk_vstupenka_zakaznik FOREIGN KEY (id_zakaznik)  REFERENCES zakaznik   ON DELETE CASCADE;

ALTER TABLE album     ADD CONSTRAINT fk_album_interpret    FOREIGN KEY (id_interpret) REFERENCES interpret  ON DELETE CASCADE;

ALTER TABLE piesen    ADD CONSTRAINT fk_piesen_album       FOREIGN KEY (id_album)     REFERENCES album      ON DELETE CASCADE;

ALTER TABLE singel    ADD CONSTRAINT fk_singel_interpret   FOREIGN KEY (id_interpret) REFERENCES interpret  ON DELETE CASCADE;

ALTER TABLE uzivatel_zakaznik         ADD CONSTRAINT fk_uzi_zak_uzivatel  FOREIGN KEY (prezyvka)     REFERENCES uzivatel  ON DELETE CASCADE;
ALTER TABLE uzivatel_zakaznik         ADD CONSTRAINT fk_uzi_zak_zakaznik  FOREIGN KEY (id_zakaznik)  REFERENCES zakaznik  ON DELETE CASCADE;

ALTER TABLE uzivatel_interpret        ADD CONSTRAINT fk_uzi_int_uzivatel  FOREIGN KEY (prezyvka)     REFERENCES uzivatel  ON DELETE CASCADE;
ALTER TABLE uzivatel_interpret        ADD CONSTRAINT fk_uzi_int_interpret FOREIGN KEY (id_interpret) REFERENCES interpret ON DELETE CASCADE;

ALTER TABLE stage_interpret_pozicia   ADD CONSTRAINT fk_sta_int_stage     FOREIGN KEY (id_stage)     REFERENCES stage     ON DELETE CASCADE;
ALTER TABLE stage_interpret_pozicia   ADD CONSTRAINT fk_sta_int_interpret FOREIGN KEY (id_interpret) REFERENCES interpret ON DELETE CASCADE;

ALTER TABLE koncert_interpret_pozicia ADD CONSTRAINT fk_kon_int_koncert   FOREIGN KEY (id_koncert)   REFERENCES koncert   ON DELETE CASCADE;
ALTER TABLE koncert_interpret_pozicia ADD CONSTRAINT fk_kon_int_interpret FOREIGN KEY (id_interpret) REFERENCES interpret ON DELETE CASCADE;



-- urcenie dalsich obmedzeni:
ALTER TABLE festival ADD CONSTRAINT c_uni_festival_nazov_rocnik UNIQUE (nazov, rocnik);



-- naplnenie databazy:
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do, rocnik)
    VALUES('Grape', 'Amfiteater Vychodna', TO_TIMESTAMP('27-07-2017', 'DD-MM-YYYY'), TO_TIMESTAMP('02-08-2017', 'DD-MM-YYYY'), 1);
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do, rocnik)
    VALUES('Grape', 'Letisko Piestany', TO_TIMESTAMP('26-07-2018', 'DD-MM-YYYY'), TO_TIMESTAMP('01-08-2018', 'DD-MM-YYYY'), 2);
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do, rocnik)
    VALUES('Grape', 'Letisko Piestany', TO_TIMESTAMP('28-07-2019', 'DD-MM-YYYY'), TO_TIMESTAMP('03-08-2019', 'DD-MM-YYYY'), 3);
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do, rocnik)
    VALUES('Grape', 'Letisko Piestany', TO_TIMESTAMP('20-07-2010', 'DD-MM-YYYY'), TO_TIMESTAMP('25-07-2019', 'DD-MM-YYYY'), 4);
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do)
    VALUES('Pohoda', 'Trencin', TO_TIMESTAMP('05-08-2019', 'DD-MM-YYYY'), TO_TIMESTAMP('10-08-2019', 'DD-MM-YYYY'));
INSERT INTO festival(nazov, miesto_konania, obdobie_konania_od, obdobie_konania_do)
    VALUES('TopFest', 'Nove Mesto nad Vahom', TO_TIMESTAMP('15-08-2019', 'DD-MM-YYYY'), TO_TIMESTAMP('20-08-2019', 'DD-MM-YYYY'));

INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(300, 500, 1000);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(300, 500, 1000);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(400, 600, 1100);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(400, 700, 1200);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(450, 750, 1250);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(400, 700, 1200);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(400, 700, 1200);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(250, 400, 750);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(250, 400, 750);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(30, 50, 100);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(40, 70, 120);
INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(30, 55, 120);

INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Stage tazkej muziky', 340, 150, 50, 50, 20, 1, 1);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Dance stage', 620, 300, 100, 80, 20, 1, 2);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Stage klasiky', 400, 150, 100, 30, 20, 1, 3);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Severny', 600, 300, 100, 50, 25, 2, 4);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Juzny', 500, 300, 50, 50, 23, 2, 5);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Vychodny', 400, 250, 50, 20, 23, 2, 6);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Zapadny', 400, 200, 50, 50, 20, 2, 7);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Slnecny', 550, 300, 100, 80, 25, 3, 8);
INSERT INTO stage(nazov, plocha, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, kapacita_interpretov, id_festival, id_cennik) VALUES('Mracny', 500, 350, 70, 35, 20, 3, 9);

INSERT INTO koncert(nazov, mesto, datum_a_cas_konania, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, id_cennik) VALUES('Intro', 'Martin', TO_TIMESTAMP('10-00-01-07-2017', 'HH24-Mi-DD-MM-YYYY'), 70, 30, 15, 10);
INSERT INTO koncert(nazov, mesto, datum_a_cas_konania, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, id_cennik) VALUES('Alfa', 'Brno', TO_TIMESTAMP('10-00-01-07-2017', 'HH24-Mi-DD-MM-YYYY'), 60, 25, 15, 11);
INSERT INTO koncert(nazov, mesto, datum_a_cas_konania, kapacita_miest_statie, kapacita_miest_sedenie, kapacita_miest_VIP, id_cennik) VALUES('Beta', 'Valca', TO_TIMESTAMP('10-00-01-07-2017', 'HH24-Mi-DD-MM-YYYY'), 80, 30, 20, 12);

INSERT INTO interpret(nazov, zaner, datum_vzniku) VALUES('Tame Impala', 'Psychedelic Rock', TO_TIMESTAMP('12-12-2007', 'DD-MM-YYYY'));
INSERT INTO interpret(nazov, zaner, datum_vzniku) VALUES('Horkyze Slize', 'Rock', TO_TIMESTAMP('01-01-1992', 'DD-MM-YYYY'));
INSERT INTO interpret(nazov, zaner, datum_vzniku) VALUES('Alt-J', 'Indie', TO_TIMESTAMP('01-01-2007', 'DD-MM-YYYY'));

INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Jozef', 'Tvrdy', 1);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Martin', 'Super', 1);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Jozko', 'Super', 1);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Jozko', 'Amater', 2);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Jozef', 'Tazky', 2);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Benjamin', 'Krotky', 3);
INSERT INTO clen(meno, priezvisko, id_interpret) VALUES('Peki', 'Marcan', 3);

INSERT INTO zakaznik(meno, priezvisko, mesto, ulica, cislo_domu, telefonne_cislo, email) 
    VALUES('Benjamin', 'Kosa', 'Martin', 'Valcianska', '55', '+421918459164', 'benkosa0@gmail.com');
INSERT INTO zakaznik(meno, priezvisko, mesto, ulica, cislo_domu, telefonne_cislo, email) 
    VALUES('Michal', 'Cibak', 'Turcianske Teplice', 'Diviacka', '1206/69', '+421911159666', 'xcibak00@gmail.com');
INSERT INTO zakaznik(meno, priezvisko, mesto, ulica, cislo_domu, telefonne_cislo, email) 
    VALUES('Jakub', 'Okrajsky', 'Zilina', 'Zilinska', '1053/107', '+421927457213', 'kubko26@gmail.com');

INSERT INTO vstupenka(datum_a_cas_zakupenia, typ, id_cennik, id_zakaznik) VALUES(TO_TIMESTAMP('13-50-01-01-2017', 'HH24-Mi-DD-MM-YYYY'), 'sedenie', 1, 1);
INSERT INTO vstupenka(datum_a_cas_zakupenia, typ, id_cennik, id_zakaznik) VALUES(TO_TIMESTAMP('06-45-01-01-2017', 'HH24-Mi-DD-MM-YYYY'), 'statie', 2, 1);
INSERT INTO vstupenka(datum_a_cas_zakupenia, typ, id_cennik, id_zakaznik) VALUES(TO_TIMESTAMP('03-15-01-01-2017', 'HH24-Mi-DD-MM-YYYY'), 'VIP', 3, 2);

INSERT INTO uzivatel(prezyvka, opravnenie) VALUES('Benji', 'zaklad');
INSERT INTO uzivatel(prezyvka, opravnenie) VALUES('Michal', 'admin');
INSERT INTO uzivatel(prezyvka, opravnenie) VALUES('Ferko555', 'spravca');

INSERT INTO album(nazov, datum_vydania, id_interpret) VALUES('Innerspeaker', TO_TIMESTAMP('01-01-2010', 'DD-MM-YYYY'), 1);
INSERT INTO album(nazov, datum_vydania, id_interpret) VALUES('54 Dole Hlavou', TO_TIMESTAMP('01-01-2009', 'DD-MM-YYYY'), 2);
INSERT INTO album(nazov, datum_vydania, id_interpret) VALUES('Relaxer', TO_TIMESTAMP('01-01-2017', 'DD-MM-YYYY'), 3);

INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('3WW', TO_TIMESTAMP('05-00','MM-SS'), 1);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('World wide', TO_TIMESTAMP('04-51','MM-SS'), 1);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('Music To Walk Home By', TO_TIMESTAMP('05-12','MM-SS'), 2);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('Mew Mew', TO_TIMESTAMP('06-10','MM-SS'), 2);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('Intro', TO_TIMESTAMP('01-22','MM-SS'), 3);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('New World', TO_TIMESTAMP('01-50','MM-SS'), 3);
INSERT INTO piesen (nazov, dlzka_trvania, id_album) VALUES('Universe', TO_TIMESTAMP('05-01','MM-SS'), 3);

INSERT INTO singel (nazov, dlzka_trvania, id_interpret) VALUES('Pop pop pop', TO_TIMESTAMP('06-43','MM-SS'), 3);
INSERT INTO singel (nazov, dlzka_trvania, id_interpret) VALUES('Blue', TO_TIMESTAMP('06-12','MM-SS'), 3);

INSERT INTO uzivatel_zakaznik (prezyvka, id_zakaznik) VALUES('Benji', 1);
INSERT INTO uzivatel_zakaznik (prezyvka, id_zakaznik) VALUES('Michal', 2);

INSERT INTO uzivatel_interpret (prezyvka, id_interpret) VALUES('Benji', 1);
INSERT INTO uzivatel_interpret (prezyvka, id_interpret) VALUES('Benji', 3);

INSERT INTO stage_interpret_pozicia (id_stage, id_interpret, pozicia) VALUES(8, 2, 'headliner');
INSERT INTO stage_interpret_pozicia (id_stage, id_interpret, pozicia) VALUES(9, 1, 'headliner');
INSERT INTO stage_interpret_pozicia (id_stage, id_interpret, pozicia) VALUES(9, 3, 'obycajny');

INSERT INTO koncert_interpret_pozicia (id_koncert, id_interpret, pozicia) VALUES(1, 2, 'hlavna_kapela');
INSERT INTO koncert_interpret_pozicia (id_koncert, id_interpret, pozicia) VALUES(1, 3, 'predkapela');
INSERT INTO koncert_interpret_pozicia (id_koncert, id_interpret, pozicia) VALUES(1, 1, 'predkapela');
INSERT INTO koncert_interpret_pozicia (id_koncert, id_interpret, pozicia) VALUES(2, 3, 'hlavna_kapela');
INSERT INTO koncert_interpret_pozicia (id_koncert, id_interpret, pozicia) VALUES(2, 1, 'predkapela');



-- dotazy nad tabulkami:
    -- Ktor? albumy obsahuj? piese? dlh?iu ako 5 min?t?
SELECT DISTINCT album.nazov, album.datum_vydania
FROM album, piesen
WHERE album.id_album=piesen.id_album AND piesen.dlzka_trvania>TO_TIMESTAMP('05-00','MM-SS');

SELECT koncert.nazov, cennik.CENA_SEDENIE FROM koncert NATURAL JOIN cennik --na ktorom koncerte je cena za sedenie > 50
where cennik.CENA_SEDENIE > 50;

SELECT koncert.nazov, cennik.CENA_STATIE FROM koncert NATURAL JOIN cennik --na ktorom koncerte je cena za statie > 300
where cennik.CENA_STATIE > 300;

SELECT koncert.nazov, cennik.CENA_VIP FROM koncert NATURAL JOIN cennik --na ktorom koncerte je cena za vip <= 1000
where cennik.CENA_VIP <= 1000;

SELECT interpret.NAZOV, stage.NAZOV from stage, interpret, festival , stage_interpret_pozicia --zobrazi vsetkch intepretov ktory vystupuju na festivale grape + stage na ktorom vzstupuju
where stage.id_stage=stage_interpret_pozicia.id_stage AND interpret.id_interpret=stage_interpret_pozicia.id_interpret AND festival.id_festival=stage.id_festival AND festival.nazov='Grape';

SELECT koncert.nazov, MAX(cennik.CENA_VIP) --zobrazi najvyssiu cenu za vip listok v jednotlivom koncerte
FROM koncert, cennik
WHERE koncert.ID_CENNIK = cennik.ID_CENNIK
GROUP BY koncert.nazov;

SELECT plocha, COUNT(*) AS Pocet --spocita kolko stageov ma rovnako velku plochu
FROM stage
GROUP BY plocha ;

--vrati true a zoznam koncertov s cenou za vip mensou ako 120
SELECT koncert.nazov
FROM koncert
WHERE EXISTS (SELECT cennik.ID_CENNIK FROM cennik WHERE cennik.ID_CENNIK = koncert.ID_CENNIK AND cennik.CENA_VIP < 120);

--- Pokrocile databazove objekty
SET serveroutput ON;

INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(30, 55, 120);
--- Trigger na prevod sumy z EUR na CZK
CREATE OR REPLACE TRIGGER prevod_na_czk
  BEFORE INSERT ON cennik
  FOR EACH ROW
BEGIN
    :NEW.cena_statie := :NEW.cena_statie * 25;
    :NEW.cena_sedenie := :NEW.cena_sedenie * 25;
    :NEW.cena_vip := :NEW.cena_vip * 25;
END;
/


INSERT INTO cennik(cena_statie, cena_sedenie, cena_vip) VALUES(30, 55, 120);

--- ukazka prevedenej sumy
SELECT * FROM cennik WHERE cennik.id_cennik = 13; --neprevedena suma
SELECT * FROM cennik WHERE cennik.id_cennik = 14; --prevedena suma

--- Trigger na auto inkrementaciu cisel vstupeniek ako primarnych klucov pri vkladani do tabulky
CREATE OR REPLACE TRIGGER auto_inkrementacia_cisla_vsupenky
  BEFORE INSERT ON vstupenka
  FOR EACH ROW
BEGIN
  :NEW.id_vstupenka := id_vstupenka.nextval;
END;
/
--- ukazka funkcnosti triggeru
INSERT INTO vstupenka(datum_a_cas_zakupenia, typ, id_cennik, id_zakaznik) VALUES(TO_TIMESTAMP('03-15-01-01-2017', 'HH24-Mi-DD-MM-YYYY'), 'VIP', 3, 2);
INSERT INTO vstupenka(datum_a_cas_zakupenia, typ, id_cennik, id_zakaznik) VALUES(TO_TIMESTAMP('03-15-01-01-2017', 'HH24-Mi-DD-MM-YYYY'), 'VIP', 3, 2);

SELECT * FROM vstupenka WHERE vstupenka.id_vstupenka <300;


CREATE OR REPLACE PROCEDURE kontrola_emailov_zakaznikov
IS
   CURSOR zakaznici IS SELECT * FROM zakaznik;
   zakaznik zakaznici%ROWTYPE;
BEGIN
  OPEN zakaznici;
  LOOP
    FETCH zakaznici into zakaznik;
    EXIT WHEN zakaznici%NOTFOUND;
      IF (zakaznik.email NOT LIKE '%@%.%')
        THEN
          dbms_output.put_line(zakaznik.meno || ' ' || zakaznik.priezvisko || ' uviedol neplatnu emailovu adresu: ' || zakaznik.email);
      END IF;
  END LOOP;
  CLOSE zakaznici;
  EXCEPTION
  WHEN OTHERS THEN
    raise_application_error(-20006, 'Nastala chyba pri kontrole emailovych adries.');
END;
/

exec kontrola_emailov_zakaznikov();



CREATE OR REPLACE PROCEDURE kontrola_telc_zakaznikov
IS
   CURSOR zakaznici IS SELECT * FROM zakaznik;
   zakaznik zakaznici%ROWTYPE;
BEGIN
  OPEN zakaznici;
  LOOP
    FETCH zakaznici into zakaznik;
    EXIT WHEN zakaznici%NOTFOUND;
      --IF (TRANSLATE(zakaznik.telefonne_cislo, '0123456789A', 'AAAAAAAAAAB') != 'AAAAAAAAAAAA')
      IF (zakaznik.telefonne_cislo NOT LIKE '[0-9]{9}+')  
        THEN
          dbms_output.put_line(zakaznik.meno || ' ' || zakaznik.priezvisko || ' uviedol neplatne telefonne cislo: ' || zakaznik.telefonne_cislo);
      END IF;
  END LOOP;
  CLOSE zakaznici;
  EXCEPTION
  WHEN OTHERS THEN
    raise_application_error(-20006, 'Nastala chyba pri kontrole emailovych adries.');
END;
/

exec kontrola_telc_zakaznikov();

GRANT ALL ON stage TO xcibak00;
GRANT ALL ON koncert TO xcibak00;
GRANT ALL ON interpret TO xcibak00;
GRANT ALL ON clen TO xcibak00;
GRANT ALL ON cennik TO xcibak00;
GRANT ALL ON vstupenka TO xcibak00;
GRANT ALL ON zakaznik TO xcibak00;

DROP MATERIALIZED VIEW MSpravca_festivalu;

CREATE MATERIALIZED VIEW MSpravca_festivalu
REFRESH ON COMMIT AS
 SELECT * FROM festival WHERE festival.nazov = 'Grape';




/* ODSTRANIT - Komentare medzi autormi projektu
    Benji - tabulka uzivatel, stlpec opravnenie, zmena dlzky na 20 - preco?
        Michal - zmena spat na 7.
    Benji - insert into zakaznik value "Benajmin", "Michak"; clen "Benjamni"
        Michal - oprava
    Michal - zmena telefonnych cisel - typ a dlzka
        nemali by byt integer, nemoze potom zacinat nulou, radsej retazec a potom moze byt aj plus
        mohli byt vo formate 0... namiesto +421..., nakolko ratame ludi len z jednej krajiny
    Michal - zmena vkladanej kapacity interpretov, 300 je moc
    Benji - ako ulica uvedena obec (ci ako sa tomu vravi)
        Michal - zmena nazvov ulic
    Michal - zmena mien, nech nie su vsade ti isti
    Michal - zmena nazvov stage-ov, pridanie viacerych, zmena plochy (plocha je asi myslena ta cast pre ludi)
    Michal - zakaznik - zmena dlzky cisla, pre nase staci 13 (+421ABCDEFGHI alebo 0ABCDEFGHI)
    Michal - odstranene NOT NULL pri PK - PK to zabezpeci
    Michal - uzivatel - prezyvka zmenena na PK, ID vypustene (netreba nastavit na UNIQUE, PK to zapezpecuje)
    Michal - zmena nazvov obmedzeni pre PK a FK
    Michal - FK REFERENCES - odstranenie nazvov stlpcov (automaticky PK), prehladnost sa neznizi (nazvy stlpca su rovnake)
    Michal - pridane ON DELETE CASCADE a CASCADE CONSTRAINTS
    Michal - presun kapacit z festivalu do stage-ov (zle modelovane v ER)
    Benji - tabulka interpret, vsetky FK maju byt naopak v tabulkach, na ktore si odkazoval: id_clen - to by jeden interpret mal prave jedneho clena,
        Michal - FK presunuty do tabulky clen
    Michal - zmena poradia tabuliek
    Michal - celkove zmena FK, dost vela ich bolo zle - plnenie tabuliek zatial nezmenene
    Benji - tabulka zakaznik, cislo domu na 50
        Michal - zmena na 15, musi sa vliest
    Michal - pridanie tabulky singel a uzivatel_zakaznik
    Michal - pridanie rocniku ako stlpec do tabulky festival s moznou hodnotou NULL + naplnenie dat
    Michal - pridane kapacity ku koncertu (zle modelovane v ER)
    Michal - kapacity pre stage rozdelene na typy

    Benji - odtranil diakritiku (T uzivatel, S opravnenie / T vstupenka, S typ) - nefungovala?
    mozno spojit meno a priezvisko dokopy, tak budu moct byt aj ludia s viacerymi menami + zjednodusenie
        uvidime na zaklade dotazov, napriklad by sme sa mohli pytat, kolki intrepreti maju medzi clenmi viacerych clenov rodiny
    zakaznik - ako adresu uvazovat iba mesto a ulicu v nom, alebo pridat obec ako nepovinny atribut pre upresnenie (Valca je obec spadajuca pod mesto Martin)
    stage - nazov by mohol byt D klucom, v ramci jedneho festivalu su rozne (spolu s FK mat ako PK?)
    koncert - zmenit mesto na miesto konania tak ako je aj festival, pripadne naopak? v ER je to rozne
    !!! tabulka festival - unikatnost nazvu:
        - bud umozni viac s rovnakym nazvom (miatlo by ludi) - to je teraz
            bolo by nutne odlisit aj v databaze, napr. rozdelenim tabulky na nazvovu (iba ID a Nazov) a datovu (zvysok, naviazany na ID)
        - alebo by bol nazov UNIQUE, resp. rovno PK namiesto ID - asi rozumnejsie
    !!! kapacity su trochu problemove... :
        pre jednotlive typy listkov by mali prisluchat aj kapacity (rozdelit na 3 stlpce alebo samostatna tabulka)
            teda pokial nechceme, aby sa stage plnil sedackami ci VIP ludmi podla toho, kolko sa preda danych listkov
        listkov sa pravdepodobne moze predat len tolko, kolko dovoli kapacita, co znamena:
        - listky by sa mali kupovat na dany stage a iba tolko, kolko je tam miest
    NULL sa zapisuje ako, vynecha sa hodnota alebo sa explicitne zapise?
    listok sa nepredava na festival, ale na konkretny stage? (dava zmysel aj z pohladu kapacit)
    !!! cennik - viaze sa na stage, teda by mohli byt rozne ceny pre rozne stage - chceme to tak?
        dalo by zmysel, keby su na jednom popularnejsie kapely...
        avsak ak ma byt pre kazdy cena rovnaka, bola by znacna duplicita cennikov za kazdy stage
        - iba prehodit ku festivalu nestaci (nebolo by mozne identifikovat, na aky stage je listok kupeny),
            treba aj vstupenky naviazat na stage a na koncert
    napad na dotaz - niektory interpret by nemal ziaden album a pytali by sme sa, aky intrepret ma iba singely
    kapacity miest treba rozdelit podla typov (nakolko sa predavaju vstupenky na dany typ) - uz len pre koncert
    moze 1 FK byt PK? rozdelenie tabulky na 2, aby nemusela mat aj ta druha svoj PK a k tomu este FK
    
    DATA:
    pridat viac vstupeniek, interpretov... asi celkove viac dat, aby boli aspon minima
    ciselne data nemusia moc davat zmysel, chcelo by prekontrolovat (stage...)
    
    OBMEDZENIA:
    ciselne udaje by mali byt kladne (kapacity, plochy atp.)
    festival
        - s neunikatnymi menami kombinacia id a rocniku musi byt unikatna
        - s unikatnymi menami kombinacia mena a rocniku musi byt unikatna
    kapacity:
        koncert - interpreti - hlavna kapela a az 3 predkapely (1-3 predkapely alebo rovne 3?)
                - listky - podla kapacity
        festival (resp. stage) - interpreti - podla kapacity
                - listky - podla kapacity
    zakaznik - aby nedochadzalo k duplicite dat, bolo by vhodne obmedzit jedneho zakaznika
        - bud 2 riadky nebudu rovnake a ratat s tym, ze si nik nebude menit telefon ci mail - idealny pripad
            pokial by si niekto zmenil niektory udaj a chceli by sme ho stale identifikovat ako toho isteho,
            v samostatnej tabulke by bolo treba nejake id, na ktore by sa naviazali jeho aliasy
        - alebo nieco s kombinaciou mena, adresy a telefonneho cisla alebo emailu, aby to bolo unikatne, ako kandidatny kluc alebo nieco take
        
        
        
        trigere
        provedury
        materializovany pohlad
        dokumnentaciu
        
        */
